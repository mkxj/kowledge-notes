设计模式：让系统代码可重用、可扩展、可解耦、更容易被人理解且保证代码可靠性

几种常用的设计模式
1.单例模式： 确保一个类只有一个实例,实现方法是先检查这个实例是否存在，若存在则直接返回，不存在先创建再返回

2.代理模式：把对一个对象的访问, 交给另一个代理对象来操作
比如前段时间做的图片懒加载，或者当频繁操作dom,频繁发送请求时可以设置缓存，等到适当的时机才使用，或者跨域问题

3.外观模式：关注的是更高级的统一接口，这个统一接口内包括了一些复杂的接口

4.适配器模式：将一个类的接口转化成另外一个接口，以满足用户需求
使用场景： 比如从一个框架换到另一个框架，尤其在两个框架比较相像时，能通过适配器进行转换，而不用把之前的代码用另一个框架再写一遍

5.装饰者模式：在不改变原对象的基础上，进行扩展，比如添加新的属性和方法，使原有对象满足用户更复杂需求

6.组合模式：对象组合成树形结构，表示部分-整体的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。
使用场景，经常在表单验证中

7.策略模式：将定义的一组算法封装起来，使其相互之间可以替换。

8.状态模式： 当一个对象内部状态发生改变时，会导致其行为的改变

9.职责链模式：请求发送者A给接受者B发送请求，如果对象B不能处理该请求，那么它会把相同的请求传给下一个接收者，直到有接受者处理为止

10.中介者模式：通过中介者对象封装一系列对象之间的交互，使得对象之间不再相互引用，降低他们之间的耦合。有点类似于观察者模式

11.享元模式：主要是通过分析大量类似对象的组成，将数据和方法分离，将数据和方法分成内部数据、内部方法和外部数据、外部方法。内部方法与内部数据指的是相似或共有的数据和方法，所以将其提取出来

12.备忘录模式：指在不破坏封闭的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。
发起人创建备忘录，记录当前自身内部状态，备忘录不能被发起人以外的人来访问
适合功能比较复杂的，但需要维护或记录属性历史的功能。

13.模板方法模式：父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类，使得子类可以在不改变父类算法结构的同时可重新定义算法中某些实现步骤。

14.桥接模式最主要的特点是将实现层（如元素绑定事件）与抽象层（如修饰页面UI逻辑）解耦分离，使两部分可以独立变化，桥接模式主要是对结构之间的解耦  eg.   $('.test').addClass('test1').remove('test')

15.迭代器模式：在不暴露对象内部结构的同时，可以顺序地访问聚合对象内部的元素。

16.命令模式：将请求与实现解耦并封装成独立对象，从而使不同的请求对客户端的实现参数化

17.简单工厂模式：由一个工厂对象来决定创建某一种产品对象类的实例，主要用来创建同一类对象。
